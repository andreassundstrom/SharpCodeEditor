@using Microsoft.JSInterop
@implements IDisposable
@inject IJSRuntime js
<div id="@(guid.ToString())"></div>
@code {
    private string _code = "";

    [Parameter]
    public string Code { get; set; } = "";

    [Parameter]
    public EventCallback<string> CodeChanged { get; set; }

    [Parameter]
    public Dictionary<string, string[]> Schema { get; set; } = new Dictionary<string, string[]>();

    [Parameter]
    public Language? Language { get; set; } = null;

    [Parameter]
    public Dictionary<string, Dictionary<string, string>> Theme { get; set; } = new();

    private Guid guid = Guid.NewGuid();
    private DotNetObjectReference<SharpCodeEditor>? dotNetReference;

    protected override bool ShouldRender() => false;

    [JSInvokable]
    public async Task CodeChange(string newValue)
    {
        if (_code != newValue)
        {
            _code = newValue;
            if (CodeChanged.HasDelegate)
            {
                await CodeChanged.InvokeAsync(newValue);
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _code = Code;
            dotNetReference = DotNetObjectReference.Create(this);
            await js.InvokeVoidAsync("CodeEditor.CreateEditor", guid.ToString(), _code, dotNetReference, Schema, Language, Theme);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_code != Code && CodeChanged.HasDelegate)
        {
            _code = Code;
            await UpdateEditorValueAsync(Code);
        }
    }

    private async Task UpdateEditorValueAsync(string value)
    {
       await js.InvokeVoidAsync("CodeEditor.SetStringValue", guid.ToString(), value);
    }

    public async void Dispose()
    {
        await js.InvokeVoidAsync("CodeEditor.Dispose", guid.ToString());
        dotNetReference?.Dispose();
    }

    public async Task<string> GetValueAsync()
    {
        return await js.InvokeAsync<string>("CodeEditor.GetStringValue", guid.ToString());
    }

    public async Task SetValueAsync(string value)
    {
        if (_code != value)
        {
            _code = value;
            await UpdateEditorValueAsync(value);
            if (CodeChanged.HasDelegate)
            {
                await CodeChanged.InvokeAsync(value);
            }
        }
    }
}